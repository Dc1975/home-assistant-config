- id: '1682262336868'
  alias: KE Trocker fertig
  variables:
    alexa_device: media_player.echo_wohnzimmer,media_player.echo_dachgeschoss
    alexa_type: announce   
  description: ''
  trigger:
  - platform: numeric_state
    entity_id: sensor.kellersteckdose_trockner_energy_power
    above: 0.5
    below: 3
    for: 00:02:00
  condition:
  - condition: state
    entity_id: input_select.is_ke_state_dryer
    state: lÃ¤uft
  action:
  - data:
      option: fertig
    entity_id: input_select.is_ke_state_dryer
    service: input_select.select_option
  - service: script.turn_on
    target:
      entity_id: script.ha_handy_notification
    data:
      variables:
        msg_title: "{{states('input_text.it_general_notification_title')}} Trockner"
        msg_message: "Der Trockner ist {{states('input_select.is_ke_state_dryer')}}"
  
#  - service: notify.alexa_media_uberall
#    data:
#      title: "{{states('input_text.it_general_notification_title')}} Trockner"
#      message: "Der Trockner ist {{states('input_select.is_ke_state_dryer')}}"
#      data:
#        type: announce
#        method: all

  - service: script.turn_on
    target:
      entity_id: script.ha_alexa_notification_queued
    data:
      variables:
        msg_title: "{{states('input_text.it_general_notification_title')}} Trockner"
        msg_message: "Der Trockner ist {{states('input_select.is_ke_state_dryer')}}"
        device: "{{ alexa_device }}"
        type: "{{ alexa_type }}"   

  - service: input_text.set_value
    data:
      value: >-
        {% set time_start = states('input_text.it_ke_dryer_last_machine_time_helper') %}
        {% if states(time_start) %}  
          {{ ((now().timestamp() - time_start | float) | as_datetime).strftime('%H:%M:%S')  }} am {{ now().timestamp() | timestamp_custom('%d.%m.%Y %H:%M') }}
        {% endif %}                     
    target:
      entity_id: input_text.it_ke_dryer_last_machine_time        
# dryer timer       
  - service: input_boolean.turn_off 
    data: {} 
    target: 
      entity_id: input_boolean.start_stopwatch_dryer           
# calculate the energy costs
  - service: input_number.set_value
    metadata: {}
    data:
      value: >-
        {{ (states('sensor.kellersteckdose_trockner_energy_today')|float(0) *
        states('input_number.in_ha_energy_price')|float(0)) | round(2) }}
    target:
      entity_id: input_number.in_ha_dryer_energy_costs       
  mode: single