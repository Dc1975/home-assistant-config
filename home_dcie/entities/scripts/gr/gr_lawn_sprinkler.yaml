gr_lawn_sprinkler:
  alias: GR Rasenbewässerung
  variables:
    alexa_device: media_player.echo_wohnzimmer,media_player.echo_dachgeschoss
    alexa_type: announce  
  sequence:
    - condition: or
      conditions:  
        - condition: state
          entity_id: input_boolean.ib_gr_lawn_sprinkler_used_in_automations_morning
          state: "on"
        - condition: state
          entity_id: input_boolean.ib_gr_lawn_sprinkler_used_in_automations_evening
          state: "on"        
    - if:
      - condition: template
        value_template: "{{ states('switch.brunnen') == 'unavailable' }}"
      then:
        - service: script.turn_on
          target:
            entity_id: script.ha_handy_notification
          data:
            variables:
              msg_title: "{{states('input_text.it_general_notification_title')}} Garten"
              msg_message: "Der Rasen kann nicht bewässert werden. Der Schalter {{ state_attr('switch.brunnen', 'friendly_name') }} ist nicht verfügbar."
        - service: script.turn_on
          target:
            entity_id: script.ha_alexa_notification_queued
          data:
            variables:
              msg_title: "{{states('input_text.it_general_notification_title')}} Garten"
              msg_message: "Der Rasen kann nicht bewässert werden. Der Schalter {{ state_attr('switch.brunnen', 'friendly_name') }} ist nicht verfügbar."
              device: "{{ alexa_device }}"
              type: "{{ alexa_type }}"                  
        # - service: notify.alexa_media_uberall
        #   data:
        #     title: "{{states('input_text.it_general_notification_title')}} Garten"
        #     message: "Der Rasen kann nicht bewässert werden. Der Schalter {{ state_attr('switch.brunnen', 'friendly_name') }} ist nicht verfügbar."
        #     data:
        #       type: announce
        #       method: all              
      else:  
        - service: switch.turn_on
          data: {}
          target:
            entity_id: switch.brunnen
        # wait if switch is really turned on          
        - delay: "00:00:{{ states('input_number.in_ha_switch_delay_response') | int }}"                
        - if:
          - condition: template
            value_template: "{{ states('switch.brunnen') == 'unavailable' or  states('switch.brunnen') == 'off' }}"
          then: 
            - service: script.turn_on
              target:
                entity_id: script.ha_handy_notification
              data:
                variables:
                  msg_title: "{{states('input_text.it_general_notification_title')}} Garten"
                  msg_message: "Der Rasen kann nicht bewässert werden. Der Schalter {{ state_attr('switch.brunnen', 'friendly_name') }} ist nicht verfügbar."
            - service: script.turn_on
              target:
                entity_id: script.ha_alexa_notification_queued
              data:
                variables:
                  msg_title: "{{states('input_text.it_general_notification_title')}} Garten"
                  msg_message: "Der Rasen kann nicht bewässert werden. Der Schalter {{ state_attr('switch.brunnen', 'friendly_name') }} ist nicht verfügbar."
                  device: "{{ alexa_device }}"
                  type: "{{ alexa_type }}"                      
            # - service: notify.alexa_media_uberall
            #   data:
            #     title: "{{states('input_text.it_general_notification_title')}} Garten"
            #     message: "Der Rasen kann nicht bewässert werden. Der Schalter {{ state_attr('switch.brunnen', 'friendly_name') }} ist nicht verfügbar."
            #     data:
            #       type: announce
            #       method: all             
          else:
            - service: script.turn_on
              target:
                entity_id: script.ha_handy_notification
              data:
                variables:
                  msg_title: "{{states('input_text.it_general_notification_title')}} Garten"
                  msg_message: "Der Rasen wird für {{states('input_number.in_gr_duration_lawn_sprinkler') | round(0) }} Minuten bewässert"
            - service: script.turn_on
              target:
                entity_id: script.ha_alexa_notification_queued
              data:
                variables:
                  msg_title: "{{states('input_text.it_general_notification_title')}} Garten"
                  msg_message: "Der Rasen wird für {{states('input_number.in_gr_duration_lawn_sprinkler') | round(0) }} Minuten bewässert"
                  device: "{{ alexa_device }}"
                  type: "{{ alexa_type }}"                      
            # - service: notify.alexa_media_uberall
            #   data:
            #     title: "{{states('input_text.it_general_notification_title')}} Garten"
            #     message: "Der Rasen wird für {{states('input_number.in_gr_duration_lawn_sprinkler') | round(0) }} Minuten bewässert"
            #     data:
            #       type: announce
            #       method: all
            - service: timer.start
              data_template:
                entity_id: timer.ti_gr_lawn_sprinkler
                duration: "00:{{states('input_number.in_gr_duration_lawn_sprinkler') | int}}:00"
            # lawn sprinkler timer 
            # https://community.home-assistant.io/t/stopwatch-with-start-stop-resume-lap-and-reset/443994/49
            - service: input_boolean.turn_on 
              data: {} 
              target: 
                entity_id: input_boolean.reset_stopwatch_lawn_sprinkler
            - service: input_boolean.turn_on 
              data: {} 
              target: 
                entity_id: input_boolean.start_stopwatch_lawn_sprinkler          
  mode: single